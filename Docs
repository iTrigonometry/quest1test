main.py
Переменные:
    player - объект игрока. 
    enm - объект противника
        Чуть подробнее. Дело в том что для противника всегда исполюзуется
        только одна переменная которая переопределяет характеристики с 
        помощью метода Enemy.set_enemy(str name)
Методы
    quest1_start() IN DEVELOPMENT
        метод, который является продолжением в истории квеста
        Переменные:
            0
    fight()
        метод, боя игрока с противником
        Логика:
            Рандомится число от 1 до 2.
            Если выпадает 1 то первым бьет игрок
            Иначе противник
            Как только значение одного из участников боя становится 
            ниже нуля, победа причисляется тому у кого хп больше

        Переменные:
            who_is_first - определяет участника боя который будет бить первым
            Используемые переменные файла:
                    player - объект игрока. 
                    enm - объект противника
                        Чуть подробнее. Дело в том что для противника всегда исполюзуется
                        только одна переменная которая переопределяет характеристики с 
                        помощью метода Enemy.set_enemy(name :str)

        Внутренние методы:
            __playerAttack()
                Метод удара игрока.
                Логика.
                    Игрок выбирает удар и в зависимости от этого будет
                    нанесен урон противнику
                Переменные:
                    number_of_hit - содержит результат выполнения метода Utils.print_fight_msg()
                    Используемые переменные файла:
                        player - объект игрока. 
                        enm - объект противника
                            Чуть подробнее. Дело в том что для противника всегда исполюзуется
                            только одна переменная которая переопределяет характеристики с 
                            помощью метода Enemy.set_enemy(name :str)
            __enemyAttack()
                метод удара врага.
                Логика
                    Просто наносится удар противником. Логика удра прописана 
                    в Enemy.hit()
                Переменные:
                    __enemyHit - содержит результат выполнения метода Enemy.hit()
            
CHARACTERS
character
    Методы
        Класс Character
        __init__(self)
            Метод определяет первоначальные характеристики персонажа.
            Используется для создания классов Player, Enemy
            Переменные:
                self.__name - имя персонажа. Стан. значение - Default Name
                self.__hp - очки здоровья персонажа. Стан. значение - 100
                self.__attack_damage - урон который используется для в расчетах
                    наносимого другому персонажу удара
                self.__inventory - инвентарь. Стан. значение - {}. IN DEVELOPMENT
                self.is_weapon_in_use - используется для определения, есть ли у персонажа
                    оружие. Стан. значение - False
                self.__amount_of_doshirak - Кол-во имеющихся дошираков. Доширак используется
                    для пополнения здоровья. Стан. значение = 0 IN DEVELOPMENT
                self.__doshirak_effect - сколько будет востанавливаться здоровья. Стан. значение - 50
                    IN DEVELOPMENT
                self.__critical_chance - шанс нанесения критического удара. Стан. значение - 0
                self.__defence - уменьшает получаемый персонажем урон при расчетах нанесения урона.
                    Стан. значение - 5
                self.__weapon - хранит объект Weapon("SomeName")
        
        use_doshirak(self): IN DEVELOPMENT
            метод для использования доширака. Доширак используется
                для пополнения здоровья.
        
        GET SET BLOCK
        get_name(self)
            возвращает имя персонажа self.__name
        set_name(self, name: str)
            устанавливает новое имя для персонажа self.__name
            Аргументы
                name - новое имя персонажа, значение переменной self.__name
        get_hp(self)
            возвращает очки здоровья персонажа, self.__hp
        set_hp(self, how_much_to_change: int)
            метод добавляет к текущим очкам здоровья 
            персонажа указанное количество очков
            Аргументы
                how_much_to_change - число необходимое для добавления к текущим
                    очкам персонажа
        get_attack_damage(self)
            метод возвращает урон который используется в расчетах
            наносимого другому персонажу удара. self.__attack_damage
        set_attack_damage(self, how_much_to_change: str)
            метод добавляет к текущим очкам урона 
            персонажа указанное количество очков
        get_inventory(self)
            возвращает инвентарь IN DEVELOPMENT
        set_inventory(self)
            IN DEVELOPMENT
        get_weapon_name(self)
            Возвращет строку имени оружия если оно есть и
            "У вас нет оружия" если оно отсутствует
            О наличии оружия говорит переменная  self.is_weapon_in_use
        set_weapon(self, name, attack_damage, crit_chance)
            устанавливает характеристики оружия и по логике вещей делает
            его доступным для персонажа
            Аргументы
                name - имя оружия
                attack_damage - урон оружия
                crit_chance - шанс критического удара оружия
        remove_weapon(self)
            Убирает возможность использования оружия и обнуляет характеристики
        get_weapon_hit_damage(self)
            возвращает значение функции Weapon.get_damage_of_hit()
        get_amount_of_doshirak(self)
            возвращет количество имеющихся дошираков. self.__amount_of_doshirak
        set_amount_of_doshirak(self, how_much_to_change)
            добавляет к уже имеющимся доширам значение how_much_to_change
        get_defence(self)
            возвращает значение защиты персонажа. self.__defence
        set_defence(self, how_much_to_change)
            добавляет к текущему значению self.__defence значение how_much_to_change
        get_critical_chance(self)
            возвращает значение шанса критического удара. self.__critical_chance
        set_critical_chance(self, how_much_to_change)
            добавляет к текущему значению self.__critical_chance значение how_much_to_change
        
player
    Класс Player(Character)
    Методы
        __init__(self)
            super.__init__()
        hit(self, name_of_hit: str)
            возвращет значение урона которое нанесется противнику
            Переменные
                base_critical_chance - базовый шанс критического удара. Равен
                    critical_chance персонажа
                random_num - число от 0 до 100. Используется для определения
                    нанесения критического удара. Если число меньше шанса критического
                    удара то наносится урон в два раза больше
enemy
    Класс Enemy
        __init__(self)
            super.__init__()
        hit(self)
            возвращает значение урона, которое будет нанесено персонажу
            Переменные
                number_of_hit - хранит число от 1 до 3, что определит удар
                random_num - число от 0 до 100. Используется для определения
                    нанесения критического удара. Если число меньше шанса критического
                    удара то наносится урон в два раза больше
        set_enemy(self, enemy_name):
            определяет характеристики противника игрока.
            Аргументы
                enemy_name - на основе этого имени будет установлен противник
                 
ITEMS
weapon
Класс Weapon
    Методы
        __init__(self, name)
            определяет начальные характеристики оружия
            Аргументы   
                name - определит имя оружия.
            Переменные
                self.__name - имя оружия
                self.__attack_damage - урон оружия. Стан. значение - 1
                self.__critical_chance - шанс критического удара. Стан. значение - 0
                self.__durability - прочность оружия. IN DEVELOPMENT
                self.__patron - количество патронов. IN DEVELOPMENT
        upgrade(self, attack, critical_chance)
            добавляет к характеристикам оружия атаку и шанс критического удара
            attack добавит число к self.__attack_damage. critical_chance добавит число к 
            self.__critical_chance
        GET SET BLOCK
        get_attack_damage(self)
            возвращет количество урона оружия. self.__attack_damage
        set_attack_damage(self, attack_damage)
            устанавливает оружию указаный урон (attack_damage)
        get_critical_chance(self)
            возвращает критический урон оружия. self.__critical_chance
        set_critical_chance(self, critical_chance)
            устанавливает оружия указаный шанс критического удара (critical_chance)
        get_name(self)
            возвращает имя оружия. self.__name
        set_name(self, name)
            устанавливает оружию указанное имя. (name)
        get_damage_of_hit()
            возвращает урон нанесенный оружием
            Переменные 
            random_num - число от 0 до 100. Используется для определения
                нанесения критического удара. Если число меньше шанса критического
                удара то наносится урон в два раза больше
        
TESTS
main

UTILS
utils

