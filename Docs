main.py
Переменные:
    player - объект игрока. 
    enm - объект противника
        Чуть подробнее. Дело в том что для противника всегда исполюзуется
        только одна переменная которая переопределяет характеристики с 
        помощью метода Enemy.set_enemy(str name)
Методы
    quest1_start() IN DEVELOPMENT
        метод, который является продолжением в истории квеста
        Переменные:
            0
    fight()
        метод, боя игрока с противником
        Логика:
            Рандомится число от 1 до 2.
            Если выпадает 1 то первым бьет игрок
            Иначе противник
            Как только значение одного из участников боя становится 
            ниже нуля, победа причисляется тому у кого хп больше

        Переменные:
            who_is_first - определяет участника боя который будет бить первым
            Используемые переменные файла:
                    player - объект игрока. 
                    enm - объект противника
                        Чуть подробнее. Дело в том что для противника всегда исполюзуется
                        только одна переменная которая переопределяет характеристики с 
                        помощью метода Enemy.set_enemy(name :str)

        Внутренние методы:
            __playerAttack()
                Метод удара игрока.
                Логика.
                    Игрок выбирает удар и в зависимости от этого будет
                    нанесен урон противнику
                Переменные:
                    number_of_hit - содержит результат выполнения метода Utils.print_fight_msg()
                    Используемые переменные файла:
                        player - объект игрока. 
                        enm - объект противника
                            Чуть подробнее. Дело в том что для противника всегда исполюзуется
                            только одна переменная которая переопределяет характеристики с 
                            помощью метода Enemy.set_enemy(name :str)
            __enemyAttack()
                метод удара врага.
                Логика
                    Просто наносится удар противником. Логика удра прописана 
                    в Enemy.hit()
                Переменные:
                    __enemyHit - содержит результат выполнения метода Enemy.hit()
            
CHARACTERS
character
    Методы
        Класс Character
        __init__(self)
            Метод определяет первоначальные характеристики персонажа.
            Используется для создания классов Player, Enemy
            Переменные:
                self.__name - имя персонажа. Стан. значение - Default Name
                self.__hp - очки здоровья персонажа. Стан. значение - 100
                self.__attack_damage - урон который используется для в расчетах
                    наносимого другому персонажу удара
                self.__inventory - инвентарь. Стан. значение - {}. IN DEVELOPMENT
                self.is_weapon_in_use - используется для определения, есть ли у персонажа
                    оружие. Стан. значение - False
                self.__amount_of_doshirak - Кол-во имеющихся дошираков. Доширак используется
                    для пополнения здоровья. Стан. значение = 0 IN DEVELOPMENT
                self.__doshirak_effect - сколько будет востанавливаться здоровья. Стан. значение - 50
                    IN DEVELOPMENT
                self.__critical_chance - шанс нанесения критического удара. Стан. значение - 0
                self.__defence - уменьшает получаемый персонажем урон при расчетах нанесения урона.
                    Стан. значение - 5
                self.__weapon - хранит объект Weapon("SomeName")
        
        use_doshirak(self): IN DEVELOPMENT
            метод для использования доширака. Доширак используется
                для пополнения здоровья.
        
        GET SET BLOCK
        get_name(self)
            возвращает имя персонажа
        set_name(self)
            устанавливает новое имя для персонажа
enemy

player

ITEMS
weapon

TESTS
main

UTILS
utils

